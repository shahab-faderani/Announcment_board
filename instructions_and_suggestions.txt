Building the app:

Requirements:

    -nodeJS v2 or greater
    -npm v6 or greater 

Build instructions, assuming that nodeJS and npm are installed:

    -Backend: open a terminal in the backend folder and run the following commands:
              
        npm i     
        npm run devStart  

    -Frontend: open a terminal in the frontend folder and run the following commands:

        npm i
        npm start

Please be aware that "npm i" commands can take up to some minutes to run. Once the execution of commands is finished
a browser will be opened with the app running on it. 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Using the app:

There is a testing dataset stored on the backend, where random announcements with arbitrary dates are available. 

Please write your announcement in the announcement input text box and then click on the "Create" button, which will 
only be enabled if there is a string in the announcement input text box that has at least one non-space character.

There is another input text box dedicated to the user's name, which is optional. Announcements without a user's name 
will be published anonymously. 

Please click on the "Delete" button to delete an announcement.

All announcements will be shown by default. Please click on your desired filter button to filter announcements 
accordingly.  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Testing the app:

There are some rudimentary UI tests written with React Testing Library and jest. run the following command to run
them:

    npm run test

Functionality tests could be written as well using the same set of tools if more time was provided. For instance to 
test the creation, deletion and filtering of announcements.

In the case of a more dynamic and complex UI, renderer's snapshot from react-test-renderer can be generated and compared
in every test run. 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Suggestions:

The current solution is effective for a single-client model. For example, if client B creates a new announcement while 
client A is passive, the new announcement will not be visible to client A. This problem could be addressed with 
WebSockets.

Practical user methods, e.g., "reply-to-announcement" can be developed.

A translation management system, e.g., Phrase can be used to easily provide the app in multiple languages.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////











